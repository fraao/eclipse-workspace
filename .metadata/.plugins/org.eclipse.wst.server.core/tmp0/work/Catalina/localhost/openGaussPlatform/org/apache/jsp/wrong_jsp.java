/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.27
 * Generated at: 2023-05-23 07:36:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import openGaussPlatform.openGausslink;
import java.sql.Connection;
import java.sql.*;
import java.util.*;

public final class wrong_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("openGaussPlatform.openGausslink");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script src=\"js/echarts.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\r\n");
      out.write("<title>错误分析</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
 
   HashMap<String,String> hashMap=new HashMap<>();
   String s=(String)session.getAttribute("当前用户");
   openGausslink obj=new openGausslink();
   Connection con= obj.GetConnection("jack", "Aowei103");
   String sql="select *from history where username="+s+";";
   PreparedStatement preparedStatement=con.prepareStatement(sql);
   ResultSet resultSet=preparedStatement.executeQuery();
   ResultSet resultSet1=resultSet;
   String[] temp=new String[1000];
   String more="";
   int i=0;
   while(resultSet1.next()){
	   String A=resultSet1.getString("wrong");
       if(!(A==null)){
	   String[] temp1=A.split(" ");
	   if(temp1[2].equals("句尾应该为分号！")||temp1[2].equals("输入不合法！")||temp1[2].equals("syntax"))temp1[2]="SQL语法错误";
	   else if(temp1[2].equals("relation")||temp1[2].equals("table"))temp1[2]="数据库对象错误";
	   else if(temp1[2].equals("column"))temp1[2]="关系表属性错误";
	   temp[i]=temp1[2];
	   i++;}
   }
   String[] temp2=new String[1000];
   int i2=0;
   int i3=0;
   for(int i1=0;i1<i;i1++){
	   String str=temp[i1];
	   boolean flag=false;
	   for(int j=0;j<i;j++){
		   if(str.equals(temp2[j])){
			   flag=true;
			   break;
		   }
	   }
	   if(flag)continue;
	   int count=0;
	   for(int k=0;k<i;k++){
		   if(str.equals(temp[k]))count++;
	   }
	   temp2[i2++]=str;
	   String num=String.valueOf(count);
	   if(i3<count){
	   more=str;
	   i3=count;
	   }
	   hashMap.put(str, num);   
   }

      out.write("\r\n");
      out.write("<div id=\"main\" style=\"width:900px;height: 600px;\"></div>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("  var myChart = echarts.init(document.getElementById('main'));\r\n");
      out.write("  option = {\r\n");
      out.write("\t\t  title: {\r\n");
      out.write("\t\t    text: '错误分析',\r\n");
      out.write("\t\t    subtext: '用户'+");
      out.print(session.getAttribute("当前用户"));
      out.write(",\r\n");
      out.write("\t\t    left: 'center'\r\n");
      out.write("\t\t  },\r\n");
      out.write("\t\t  tooltip: {\r\n");
      out.write("\t\t    trigger: 'item'\r\n");
      out.write("\t\t  },\r\n");
      out.write("\t\t  legend: {\r\n");
      out.write("\t\t    orient: 'vertical',\r\n");
      out.write("\t\t    left: 'left'\r\n");
      out.write("\t\t  },\r\n");
      out.write("\t\t  series: [\r\n");
      out.write("\t\t    {\r\n");
      out.write("\t\t      name: '出错原因',\r\n");
      out.write("\t\t      type: 'pie',\r\n");
      out.write("\t\t      radius: '50%',\r\n");
      out.write("\t\t      data: [\r\n");
      out.write("\t\t    \t  ");

		    	 for(String str:hashMap.keySet()){
      out.write("\r\n");
      out.write("\t\t        { value: ");
      out.print(hashMap.get(str) );
      out.write(", name: '");
      out.print(str);
      out.write("' },\r\n");
      out.write("\t\t        ");
}
      out.write("\r\n");
      out.write("\t\t      ],\r\n");
      out.write("\t\t      emphasis: {\r\n");
      out.write("\t\t        itemStyle: {\r\n");
      out.write("\t\t          shadowBlur: 10,\r\n");
      out.write("\t\t          shadowOffsetX: 0,\r\n");
      out.write("\t\t          shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n");
      out.write("\t\t        }\r\n");
      out.write("\t\t      }\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t  ]\r\n");
      out.write("\t\t};\r\n");
      out.write("  myChart.setOption(option);\r\n");
      out.write("</script>\r\n");
      out.write("您当前出错最多的原因是：");
      out.print(more );
      out.write("<br>\r\n");
      out.write("据此给出以下建议：");
if(more.equals("SQL语法错误")) 
      out.print("仔细阅读SQL官方文档，注意SQL书写正确" );
      out.write("\r\n");
      out.write("                 ");
if(more.equals("数据库对象错误")) 
      out.print("注意当前数据库中已经存在的对象" );
      out.write("\r\n");
      out.write("                 ");
if(more.equals("关系表属性错误")) 
      out.print("注意先查看关系表中属性是否存在以及约束情况" );
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
